{"version":3,"sources":["components/Searchbar/Searchbar.jsx","App.jsx","reportWebVitals.js","index.js","components/Searchbar/Searchbar.module.scss"],"names":["Searchbar","state","searchInputValue","searchContent","trim","length","searchKeys","props","result","resultList","forEach","searchKey","dataList","dataObject","searchKeyIndex","key","caseSensitive","includes","push","toLowerCase","resultCallback","handleOnSubmit","event","preventDefault","setState","target","searchInput","value","handleOnChange","resultOnSubmit","this","className","alignIcon","icon","placeholder","autoFocus","styles","onSubmit","id","name","onChange","type","Component","defaultProps","faSearch","App","data","componentDidMount","jsonData","partners","fetchResult","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0170bf36.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Searchbar.module.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n/**\n * Renders a <Searchbar /> component\n * @component\n * @example\n *\t<Searchbar\n *\t\tdataList={this.state.data}\n *\t\tsearchKeys={[\"name\", \"description\"]}\n *\t\tcaseSensitive={false}\n *\t\tresultOnSubmit={true}\n *\t\tresultCallback={this.fetchResult}\n *\t\tclassName=\"searchInput\"\n *\t\talignIcon=\"right\"\n *\t\tautoFocus={true}\n *\t\tplaceholder=\"Search\"\n * \t\ticonColor=\"black\"\n *\t/>\n */\nclass Searchbar extends Component {\n\tstate = {\n\t\tsearchInputValue: \"\",\n\t};\n\t/**\n\t * @function searchContent\n\t * @param {Event} event\n\t * @fires props.resultCallback\n\t */\n\tsearchContent = () => {\n\t\t/**\n\t\t * Check if input is not empty and is a valid string.\n\t\t */\n\t\tif (this.state.searchInputValue.trim().length) {\n\t\t\t/**\n\t\t\t * @property  {Array}\n\t\t\t * Placeholder for props.searchKeys.\n\t\t\t */\n\t\t\tconst searchKeys = this.props.searchKeys;\n\t\t\t/**\n\t\t\t * @property {Object}\n\t\t\t * Stores searchKey and array of matched pattern objects. Imagine it as bucket for sorting data objects. Data Object would be sorted out in any one of the buckets.\n\t\t\t * If we search for pattern \"Jon\" and key \"name\". All the objects with key \"name\" having pattern \"Jon\" would be stored in \"nameData\".\n\t\t\t * If we search for pattern \"Engineer\" and key \"description\". All the objects with key \"description\" having pattern \"Engineer\" would be stored in \"descriptionData\".\n\t\t\t * @example\n\t\t\t * result = {\n\t\t\t * \tnameData: [\n\t\t\t * \t\t{\n\t\t\t * \t\t\tname: \"Some awesome name having Jon\",\n\t\t\t * \t\t\tdescription: \"some description having X\",\n\t\t\t * \t\t\t...\n\t\t\t * \t\t},\n\t\t\t * \t],\n\t\t\t * \tdescriptionData: [\n\t\t\t * \t\t{\n\t\t\t * \t\t\tname: \"Some other awesome name\",\n\t\t\t * \t\t\tdescription: \"some description having Engineer\",\n\t\t\t * \t\t},\n\t\t\t * \t]\n\t\t\t * }\n\t\t\t */\n\t\t\tlet result = {};\n\t\t\t/**\n\t\t\t * @property {Array}\n\t\t\t * For storing final result.\n\t\t\t * Initialized with keys in pattern of \"searchKeyData\" and empty array as value.\n\t\t\t */\n\t\t\tlet resultList = [];\n\t\t\tsearchKeys.forEach((searchKey) => {\n\t\t\t\tresult[`${searchKey}Data`] = [];\n\t\t\t});\n\t\t\tthis.props.dataList.forEach((dataObject) => {\n\t\t\t\t/**\n\t\t\t\t * Iterate searchKeys and search dataObject[searchKey] for pattern.\n\t\t\t\t * If data is found, push object to result[searchKeyData] array.\n\t\t\t\t */\n\t\t\t\tfor (\n\t\t\t\t\tlet searchKeyIndex = 0;\n\t\t\t\t\tsearchKeyIndex < searchKeys.length;\n\t\t\t\t\tsearchKeyIndex++\n\t\t\t\t) {\n\t\t\t\t\tconst key = searchKeys[searchKeyIndex];\n\t\t\t\t\tif (dataObject[key]) {\n\t\t\t\t\t\tif (this.props.caseSensitive) {\n\t\t\t\t\t\t\tif (dataObject[key].includes(this.state.searchInputValue)) {\n\t\t\t\t\t\t\t\tresult[`${key}Data`].push(dataObject);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tdataObject[key]\n\t\t\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t\t\t.includes(this.state.searchInputValue.toLowerCase())\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tresult[`${key}Data`].push(dataObject);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t/**\n\t\t\t * Create sorted list of result with order of props.searchKeys\n\t\t\t */\n\t\t\tsearchKeys.forEach((searchKey) => {\n\t\t\t\tresultList.push(...result[`${searchKey}Data`]);\n\t\t\t});\n\t\t\t/**\n\t\t\t * Execute callback and return result.\n\t\t\t */\n\t\t\tthis.props.resultCallback(resultList);\n\t\t}\n\t};\n\n\t/**\n\t * @function handleOnSubmit\n\t * @param {Event} event\n\t * @fires searchContent\n\t * Sets searchInputValue inside state and executes searchContent.\n\t */\n\thandleOnSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.setState({ searchInputValue: event.target.searchInput.value });\n\t\tthis.searchContent();\n\t};\n\t/**\n\t * @function handleOnChange\n\t * @param {Event} event\n\t * @fires searchContent\n\t * Sets searchInputValue inside state and executes searchContent if resultOnSubmit is false.\n\t */\n\thandleOnChange = (event) => {\n\t\tthis.setState({ searchInputValue: event.target.value });\n\t\tif (!this.props.resultOnSubmit) {\n\t\t\tthis.searchContent();\n\t\t}\n\t};\n\trender() {\n\t\tlet { className, alignIcon, icon, placeholder, autoFocus } = this.props;\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={`${styles[\"inputContainer\"]} ${styles[alignIcon]} ${\n\t\t\t\t\tclassName ? className : styles[\"defaultInput\"]\n\t\t\t\t} ${alignIcon}`}\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<form onSubmit={this.handleOnSubmit}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"searchInput\"\n\t\t\t\t\t\tname=\"searchInput\"\n\t\t\t\t\t\tclassName={styles[\"universalInput\"]}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tonChange={this.handleOnChange}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={this.state.searchInputValue}\n\t\t\t\t\t\tautoFocus={autoFocus}\n\t\t\t\t\t/>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nSearchbar.propTypes = {\n\t/**\n\t * Callback function when result is generated (Required)\n\t */\n\tresultCallback: PropTypes.func.isRequired,\n\t/**\n\t * List on which search is to be performed (Required)\n\t */\n\tdataList: PropTypes.array.isRequired,\n\t/**\n\t * Keys or items you want to search (Required)\n\t */\n\tsearchKeys: PropTypes.arrayOf(PropTypes.string),\n\t/**\n\t * If true result would be genrated onSubmit else onChange\n\t */\n\tresultOnSubmit: PropTypes.bool,\n\t/**\n\t * SCSS className\n\t */\n\tclassName: PropTypes.string,\n\t/**\n\t * Input placeholder\n\t */\n\tplaceholder: PropTypes.string,\n\t/**\n\t * Input autofocus\n\t */\n\tautoFocus: PropTypes.bool,\n\t/**\n\t * Should search be caseSesnsitive\n\t */\n\tcaseSensitive: PropTypes.bool,\n\t/**\n\t * Align search icon to left or right\n\t */\n\talignIcon: PropTypes.oneOf([\"left\", \"right\"]),\n\t/**\n\t * Icon displayed along side input field\n\t */\n\ticon: PropTypes.instanceOf(FontAwesomeIcon),\n};\n\nSearchbar.defaultProps = {\n\tplaceholder: \"\",\n\tclassName: \"\",\n\tautoFocus: false,\n\tcaseSensitive: false,\n\talignIcon: \"right\",\n\tresultOnSubmit: false,\n\ticon: <FontAwesomeIcon icon={faSearch} />,\n};\n\nexport default Searchbar;\n","import React, { Component } from \"react\";\nimport Searchbar from \"./components/Searchbar/Searchbar\";\nimport \"./App.scss\";\nimport jsonData from \"./data/sample-data.json\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faCoffee } from \"@fortawesome/free-solid-svg-icons\";\nclass App extends Component {\n\tstate = {\n\t\tdata: [],\n\t};\n\tcomponentDidMount = () => {\n\t\tthis.setState((state, props) => ({\n\t\t\tdata: jsonData.partners,\n\t\t}));\n\t};\n\tfetchResult = (result) => {\n\t\tconsole.log(result);\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"AppContainer\">\n\t\t\t\t<h1>Universal Search</h1>\n\t\t\t\t<Searchbar\n\t\t\t\t\tdataList={this.state.data}\n\t\t\t\t\tsearchKeys={[\"name\", \"description\"]}\n\t\t\t\t\talignIcon=\"right\"\n\t\t\t\t\tresultOnSubmit={false}\n\t\t\t\t\tresultCallback={this.fetchResult}\n\t\t\t\t\tcaseSensitive={false}\n\t\t\t\t\tclassName=\"searchInput\"\n\t\t\t\t\tautoFocus={true}\n\t\t\t\t\tplaceholder=\"Search\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"Searchbar_inputContainer__1a39e\",\"searchIcon\":\"Searchbar_searchIcon__fCBBR\",\"defaultInput\":\"Searchbar_defaultInput__1x3kL\",\"left\":\"Searchbar_left__3np8X\",\"right\":\"Searchbar_right__1mujr\",\"universalInput\":\"Searchbar_universalInput__3m4xz\"};"],"sourceRoot":""}